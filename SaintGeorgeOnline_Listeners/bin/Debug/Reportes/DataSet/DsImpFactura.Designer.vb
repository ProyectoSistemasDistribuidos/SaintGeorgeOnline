'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4961
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsImpFactura"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsImpFactura
    Inherits Global.System.Data.DataSet
    
    Private tablePG_USP_GET_PagosModuloImpresionFactura As PG_USP_GET_PagosModuloImpresionFacturaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PG_USP_GET_PagosModuloImpresionFactura")) Is Nothing) Then
                MyBase.Tables.Add(New PG_USP_GET_PagosModuloImpresionFacturaDataTable(ds.Tables("PG_USP_GET_PagosModuloImpresionFactura")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PG_USP_GET_PagosModuloImpresionFactura() As PG_USP_GET_PagosModuloImpresionFacturaDataTable
        Get
            Return Me.tablePG_USP_GET_PagosModuloImpresionFactura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsImpFactura = CType(MyBase.Clone,DsImpFactura)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PG_USP_GET_PagosModuloImpresionFactura")) Is Nothing) Then
                MyBase.Tables.Add(New PG_USP_GET_PagosModuloImpresionFacturaDataTable(ds.Tables("PG_USP_GET_PagosModuloImpresionFactura")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePG_USP_GET_PagosModuloImpresionFactura = CType(MyBase.Tables("PG_USP_GET_PagosModuloImpresionFactura"),PG_USP_GET_PagosModuloImpresionFacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePG_USP_GET_PagosModuloImpresionFactura) Is Nothing) Then
                Me.tablePG_USP_GET_PagosModuloImpresionFactura.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsImpFactura"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsImpFactura.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePG_USP_GET_PagosModuloImpresionFactura = New PG_USP_GET_PagosModuloImpresionFacturaDataTable
        MyBase.Tables.Add(Me.tablePG_USP_GET_PagosModuloImpresionFactura)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePG_USP_GET_PagosModuloImpresionFactura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsImpFactura = New DsImpFactura
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PG_USP_GET_PagosModuloImpresionFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As PG_USP_GET_PagosModuloImpresionFacturaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PG_USP_GET_PagosModuloImpresionFacturaDataTable
        Inherits Global.System.Data.TypedTableBase(Of PG_USP_GET_PagosModuloImpresionFacturaRow)
        
        Private columnidx As Global.System.Data.DataColumn
        
        Private columnCodigoPago As Global.System.Data.DataColumn
        
        Private columnCodigoDeuda As Global.System.Data.DataColumn
        
        Private columnCodigoConceptoCobro As Global.System.Data.DataColumn
        
        Private columnCodigoAlumno As Global.System.Data.DataColumn
        
        Private columnCodigoFamiliar As Global.System.Data.DataColumn
        
        Private columnNombreCompletoAlumno As Global.System.Data.DataColumn
        
        Private columnLocalizacionAlumno As Global.System.Data.DataColumn
        
        Private columnNombreCompletoFamiliar As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRUC As Global.System.Data.DataColumn
        
        Private columnDireccionFamiliar As Global.System.Data.DataColumn
        
        Private columnDocumentoFamiliar As Global.System.Data.DataColumn
        
        Private columnFechaEmision As Global.System.Data.DataColumn
        
        Private columnFechaPago As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcionDetalle As Global.System.Data.DataColumn
        
        Private columnMontoDetallePago As Global.System.Data.DataColumn
        
        Private columnMontoValorVenta As Global.System.Data.DataColumn
        
        Private columnDescIGV As Global.System.Data.DataColumn
        
        Private columnMontoIGV As Global.System.Data.DataColumn
        
        Private columnMontoTotalTexto As Global.System.Data.DataColumn
        
        Private columnMontoTotalPago As Global.System.Data.DataColumn
        
        Private columnDescMoneda As Global.System.Data.DataColumn
        
        Private columnSimboloMoneda As Global.System.Data.DataColumn
        
        Private columnDiaPago As Global.System.Data.DataColumn
        
        Private columnMesPago As Global.System.Data.DataColumn
        
        Private columnAnioPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PG_USP_GET_PagosModuloImpresionFactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoDeudaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoDeuda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConceptoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAlumnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAlumno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFamiliarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFamiliar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCompletoAlumnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCompletoAlumno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalizacionAlumnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalizacionAlumno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCompletoFamiliarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCompletoFamiliar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionFamiliarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionFamiliar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocumentoFamiliarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocumentoFamiliar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEmisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEmision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionDetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDetallePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoDetallePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoValorVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoValorVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescIGVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescIGV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoIGVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoIGV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalTextoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalTexto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SimboloMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSimboloMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMesPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnioPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnioPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PG_USP_GET_PagosModuloImpresionFacturaRow
            Get
                Return CType(Me.Rows(index),PG_USP_GET_PagosModuloImpresionFacturaRow)
            End Get
        End Property
        
        Public Event PG_USP_GET_PagosModuloImpresionFacturaRowChanging As PG_USP_GET_PagosModuloImpresionFacturaRowChangeEventHandler
        
        Public Event PG_USP_GET_PagosModuloImpresionFacturaRowChanged As PG_USP_GET_PagosModuloImpresionFacturaRowChangeEventHandler
        
        Public Event PG_USP_GET_PagosModuloImpresionFacturaRowDeleting As PG_USP_GET_PagosModuloImpresionFacturaRowChangeEventHandler
        
        Public Event PG_USP_GET_PagosModuloImpresionFacturaRowDeleted As PG_USP_GET_PagosModuloImpresionFacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPG_USP_GET_PagosModuloImpresionFacturaRow(ByVal row As PG_USP_GET_PagosModuloImpresionFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPG_USP_GET_PagosModuloImpresionFacturaRow( _
                    ByVal CodigoPago As Integer,  _
                    ByVal CodigoDeuda As Integer,  _
                    ByVal CodigoConceptoCobro As Integer,  _
                    ByVal CodigoAlumno As String,  _
                    ByVal CodigoFamiliar As Integer,  _
                    ByVal NombreCompletoAlumno As String,  _
                    ByVal LocalizacionAlumno As String,  _
                    ByVal NombreCompletoFamiliar As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal RUC As String,  _
                    ByVal DireccionFamiliar As String,  _
                    ByVal DocumentoFamiliar As String,  _
                    ByVal FechaEmision As String,  _
                    ByVal FechaPago As String,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DescripcionDetalle As String,  _
                    ByVal MontoDetallePago As Decimal,  _
                    ByVal MontoValorVenta As Decimal,  _
                    ByVal DescIGV As String,  _
                    ByVal MontoIGV As String,  _
                    ByVal MontoTotalTexto As String,  _
                    ByVal MontoTotalPago As Decimal,  _
                    ByVal DescMoneda As String,  _
                    ByVal SimboloMoneda As String,  _
                    ByVal DiaPago As String,  _
                    ByVal MesPago As String,  _
                    ByVal AnioPago As String) As PG_USP_GET_PagosModuloImpresionFacturaRow
            Dim rowPG_USP_GET_PagosModuloImpresionFacturaRow As PG_USP_GET_PagosModuloImpresionFacturaRow = CType(Me.NewRow,PG_USP_GET_PagosModuloImpresionFacturaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CodigoPago, CodigoDeuda, CodigoConceptoCobro, CodigoAlumno, CodigoFamiliar, NombreCompletoAlumno, LocalizacionAlumno, NombreCompletoFamiliar, RazonSocial, RUC, DireccionFamiliar, DocumentoFamiliar, FechaEmision, FechaPago, NumeroDocumento, DescripcionDetalle, MontoDetallePago, MontoValorVenta, DescIGV, MontoIGV, MontoTotalTexto, MontoTotalPago, DescMoneda, SimboloMoneda, DiaPago, MesPago, AnioPago}
            rowPG_USP_GET_PagosModuloImpresionFacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPG_USP_GET_PagosModuloImpresionFacturaRow)
            Return rowPG_USP_GET_PagosModuloImpresionFacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PG_USP_GET_PagosModuloImpresionFacturaDataTable = CType(MyBase.Clone,PG_USP_GET_PagosModuloImpresionFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PG_USP_GET_PagosModuloImpresionFacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidx = MyBase.Columns("idx")
            Me.columnCodigoPago = MyBase.Columns("CodigoPago")
            Me.columnCodigoDeuda = MyBase.Columns("CodigoDeuda")
            Me.columnCodigoConceptoCobro = MyBase.Columns("CodigoConceptoCobro")
            Me.columnCodigoAlumno = MyBase.Columns("CodigoAlumno")
            Me.columnCodigoFamiliar = MyBase.Columns("CodigoFamiliar")
            Me.columnNombreCompletoAlumno = MyBase.Columns("NombreCompletoAlumno")
            Me.columnLocalizacionAlumno = MyBase.Columns("LocalizacionAlumno")
            Me.columnNombreCompletoFamiliar = MyBase.Columns("NombreCompletoFamiliar")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnDireccionFamiliar = MyBase.Columns("DireccionFamiliar")
            Me.columnDocumentoFamiliar = MyBase.Columns("DocumentoFamiliar")
            Me.columnFechaEmision = MyBase.Columns("FechaEmision")
            Me.columnFechaPago = MyBase.Columns("FechaPago")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnDescripcionDetalle = MyBase.Columns("DescripcionDetalle")
            Me.columnMontoDetallePago = MyBase.Columns("MontoDetallePago")
            Me.columnMontoValorVenta = MyBase.Columns("MontoValorVenta")
            Me.columnDescIGV = MyBase.Columns("DescIGV")
            Me.columnMontoIGV = MyBase.Columns("MontoIGV")
            Me.columnMontoTotalTexto = MyBase.Columns("MontoTotalTexto")
            Me.columnMontoTotalPago = MyBase.Columns("MontoTotalPago")
            Me.columnDescMoneda = MyBase.Columns("DescMoneda")
            Me.columnSimboloMoneda = MyBase.Columns("SimboloMoneda")
            Me.columnDiaPago = MyBase.Columns("DiaPago")
            Me.columnMesPago = MyBase.Columns("MesPago")
            Me.columnAnioPago = MyBase.Columns("AnioPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidx = New Global.System.Data.DataColumn("idx", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidx)
            Me.columnCodigoPago = New Global.System.Data.DataColumn("CodigoPago", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPago)
            Me.columnCodigoDeuda = New Global.System.Data.DataColumn("CodigoDeuda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoDeuda)
            Me.columnCodigoConceptoCobro = New Global.System.Data.DataColumn("CodigoConceptoCobro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConceptoCobro)
            Me.columnCodigoAlumno = New Global.System.Data.DataColumn("CodigoAlumno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAlumno)
            Me.columnCodigoFamiliar = New Global.System.Data.DataColumn("CodigoFamiliar", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFamiliar)
            Me.columnNombreCompletoAlumno = New Global.System.Data.DataColumn("NombreCompletoAlumno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCompletoAlumno)
            Me.columnLocalizacionAlumno = New Global.System.Data.DataColumn("LocalizacionAlumno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalizacionAlumno)
            Me.columnNombreCompletoFamiliar = New Global.System.Data.DataColumn("NombreCompletoFamiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCompletoFamiliar)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRUC = New Global.System.Data.DataColumn("RUC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnDireccionFamiliar = New Global.System.Data.DataColumn("DireccionFamiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionFamiliar)
            Me.columnDocumentoFamiliar = New Global.System.Data.DataColumn("DocumentoFamiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocumentoFamiliar)
            Me.columnFechaEmision = New Global.System.Data.DataColumn("FechaEmision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEmision)
            Me.columnFechaPago = New Global.System.Data.DataColumn("FechaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPago)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnDescripcionDetalle = New Global.System.Data.DataColumn("DescripcionDetalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionDetalle)
            Me.columnMontoDetallePago = New Global.System.Data.DataColumn("MontoDetallePago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDetallePago)
            Me.columnMontoValorVenta = New Global.System.Data.DataColumn("MontoValorVenta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoValorVenta)
            Me.columnDescIGV = New Global.System.Data.DataColumn("DescIGV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescIGV)
            Me.columnMontoIGV = New Global.System.Data.DataColumn("MontoIGV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoIGV)
            Me.columnMontoTotalTexto = New Global.System.Data.DataColumn("MontoTotalTexto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalTexto)
            Me.columnMontoTotalPago = New Global.System.Data.DataColumn("MontoTotalPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalPago)
            Me.columnDescMoneda = New Global.System.Data.DataColumn("DescMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMoneda)
            Me.columnSimboloMoneda = New Global.System.Data.DataColumn("SimboloMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSimboloMoneda)
            Me.columnDiaPago = New Global.System.Data.DataColumn("DiaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaPago)
            Me.columnMesPago = New Global.System.Data.DataColumn("MesPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMesPago)
            Me.columnAnioPago = New Global.System.Data.DataColumn("AnioPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnioPago)
            Me.columnidx.AutoIncrement = true
            Me.columnidx.AutoIncrementSeed = -1
            Me.columnidx.AutoIncrementStep = -1
            Me.columnidx.AllowDBNull = false
            Me.columnidx.ReadOnly = true
            Me.columnCodigoAlumno.MaxLength = 8
            Me.columnNombreCompletoAlumno.MaxLength = 200
            Me.columnLocalizacionAlumno.MaxLength = 50
            Me.columnNombreCompletoFamiliar.MaxLength = 200
            Me.columnRazonSocial.MaxLength = 200
            Me.columnRUC.MaxLength = 200
            Me.columnDireccionFamiliar.MaxLength = 100
            Me.columnDocumentoFamiliar.MaxLength = 20
            Me.columnFechaEmision.MaxLength = 10
            Me.columnFechaPago.MaxLength = 10
            Me.columnNumeroDocumento.MaxLength = 20
            Me.columnDescripcionDetalle.MaxLength = 200
            Me.columnDescIGV.MaxLength = 200
            Me.columnMontoIGV.MaxLength = 20
            Me.columnMontoTotalTexto.MaxLength = 100
            Me.columnDescMoneda.MaxLength = 50
            Me.columnSimboloMoneda.MaxLength = 10
            Me.columnDiaPago.MaxLength = 2
            Me.columnMesPago.MaxLength = 2
            Me.columnAnioPago.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPG_USP_GET_PagosModuloImpresionFacturaRow() As PG_USP_GET_PagosModuloImpresionFacturaRow
            Return CType(Me.NewRow,PG_USP_GET_PagosModuloImpresionFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PG_USP_GET_PagosModuloImpresionFacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PG_USP_GET_PagosModuloImpresionFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PG_USP_GET_PagosModuloImpresionFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent PG_USP_GET_PagosModuloImpresionFacturaRowChanged(Me, New PG_USP_GET_PagosModuloImpresionFacturaRowChangeEvent(CType(e.Row,PG_USP_GET_PagosModuloImpresionFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PG_USP_GET_PagosModuloImpresionFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent PG_USP_GET_PagosModuloImpresionFacturaRowChanging(Me, New PG_USP_GET_PagosModuloImpresionFacturaRowChangeEvent(CType(e.Row,PG_USP_GET_PagosModuloImpresionFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PG_USP_GET_PagosModuloImpresionFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PG_USP_GET_PagosModuloImpresionFacturaRowDeleted(Me, New PG_USP_GET_PagosModuloImpresionFacturaRowChangeEvent(CType(e.Row,PG_USP_GET_PagosModuloImpresionFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PG_USP_GET_PagosModuloImpresionFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PG_USP_GET_PagosModuloImpresionFacturaRowDeleting(Me, New PG_USP_GET_PagosModuloImpresionFacturaRowChangeEvent(CType(e.Row,PG_USP_GET_PagosModuloImpresionFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePG_USP_GET_PagosModuloImpresionFacturaRow(ByVal row As PG_USP_GET_PagosModuloImpresionFacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsImpFactura = New DsImpFactura
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PG_USP_GET_PagosModuloImpresionFacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PG_USP_GET_PagosModuloImpresionFacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablePG_USP_GET_PagosModuloImpresionFactura As PG_USP_GET_PagosModuloImpresionFacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePG_USP_GET_PagosModuloImpresionFactura = CType(Me.Table,PG_USP_GET_PagosModuloImpresionFacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idx() As Integer
            Get
                Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.idxColumn),Integer)
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.idxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPago() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoPagoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPago' de la tabla 'PG_USP_GET_PagosModuloImpresionF"& _ 
                            "actura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoDeuda() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoDeudaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoDeuda' de la tabla 'PG_USP_GET_PagosModuloImpresion"& _ 
                            "Factura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoDeudaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConceptoCobro() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoConceptoCobroColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoConceptoCobro' de la tabla 'PG_USP_GET_PagosModuloI"& _ 
                            "mpresionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoConceptoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAlumno() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoAlumnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoAlumno' de la tabla 'PG_USP_GET_PagosModuloImpresio"& _ 
                            "nFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoAlumnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFamiliar() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoFamiliarColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoFamiliar' de la tabla 'PG_USP_GET_PagosModuloImpres"& _ 
                            "ionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoFamiliarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCompletoAlumno() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoAlumnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCompletoAlumno' de la tabla 'PG_USP_GET_PagosModulo"& _ 
                            "ImpresionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoAlumnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalizacionAlumno() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.LocalizacionAlumnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LocalizacionAlumno' de la tabla 'PG_USP_GET_PagosModuloIm"& _ 
                            "presionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.LocalizacionAlumnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCompletoFamiliar() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoFamiliarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCompletoFamiliar' de la tabla 'PG_USP_GET_PagosModu"& _ 
                            "loImpresionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoFamiliarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'PG_USP_GET_PagosModuloImpresion"& _ 
                            "Factura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RUCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'PG_USP_GET_PagosModuloImpresionFactura'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionFamiliar() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DireccionFamiliarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DireccionFamiliar' de la tabla 'PG_USP_GET_PagosModuloImp"& _ 
                            "resionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DireccionFamiliarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocumentoFamiliar() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DocumentoFamiliarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DocumentoFamiliar' de la tabla 'PG_USP_GET_PagosModuloImp"& _ 
                            "resionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DocumentoFamiliarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEmision() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaEmisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaEmision' de la tabla 'PG_USP_GET_PagosModuloImpresio"& _ 
                            "nFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaEmisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaPago' de la tabla 'PG_USP_GET_PagosModuloImpresionFa"& _ 
                            "ctura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PG_USP_GET_PagosModuloImpre"& _ 
                            "sionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionDetalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescripcionDetalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionDetalle' de la tabla 'PG_USP_GET_PagosModuloIm"& _ 
                            "presionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescripcionDetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDetallePago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoDetallePagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoDetallePago' de la tabla 'PG_USP_GET_PagosModuloImpr"& _ 
                            "esionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoDetallePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoValorVenta() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoValorVentaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoValorVenta' de la tabla 'PG_USP_GET_PagosModuloImpre"& _ 
                            "sionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoValorVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescIGV() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescIGVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescIGV' de la tabla 'PG_USP_GET_PagosModuloImpresionFact"& _ 
                            "ura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescIGVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoIGV() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoIGVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoIGV' de la tabla 'PG_USP_GET_PagosModuloImpresionFac"& _ 
                            "tura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoIGVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalTexto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalTextoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoTotalTexto' de la tabla 'PG_USP_GET_PagosModuloImpre"& _ 
                            "sionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalTextoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoTotalPago' de la tabla 'PG_USP_GET_PagosModuloImpres"& _ 
                            "ionFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMoneda() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescMonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescMoneda' de la tabla 'PG_USP_GET_PagosModuloImpresionF"& _ 
                            "actura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SimboloMoneda() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.SimboloMonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SimboloMoneda' de la tabla 'PG_USP_GET_PagosModuloImpresi"& _ 
                            "onFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.SimboloMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DiaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiaPago' de la tabla 'PG_USP_GET_PagosModuloImpresionFact"& _ 
                            "ura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DiaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MesPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MesPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MesPago' de la tabla 'PG_USP_GET_PagosModuloImpresionFact"& _ 
                            "ura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MesPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnioPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.AnioPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AnioPago' de la tabla 'PG_USP_GET_PagosModuloImpresionFac"& _ 
                            "tura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.AnioPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoDeudaNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoDeudaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoDeudaNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoDeudaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoConceptoCobroNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoConceptoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoConceptoCobroNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoConceptoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoAlumnoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoAlumnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoAlumnoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoAlumnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFamiliarNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoFamiliarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFamiliarNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.CodigoFamiliarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCompletoAlumnoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoAlumnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCompletoAlumnoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoAlumnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalizacionAlumnoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.LocalizacionAlumnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalizacionAlumnoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.LocalizacionAlumnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCompletoFamiliarNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoFamiliarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCompletoFamiliarNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NombreCompletoFamiliarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RUCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.RUCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionFamiliarNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DireccionFamiliarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionFamiliarNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DireccionFamiliarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocumentoFamiliarNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DocumentoFamiliarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocumentoFamiliarNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DocumentoFamiliarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaEmisionNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaEmisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaEmisionNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaEmisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.FechaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionDetalleNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescripcionDetalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionDetalleNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescripcionDetalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoDetallePagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoDetallePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoDetallePagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoDetallePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoValorVentaNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoValorVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoValorVentaNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoValorVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescIGVNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescIGVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescIGVNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescIGVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoIGVNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoIGVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoIGVNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoIGVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalTextoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalTextoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalTextoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalTextoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalPagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalPagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MontoTotalPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMonedaNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMonedaNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DescMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSimboloMonedaNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.SimboloMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSimboloMonedaNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.SimboloMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiaPagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DiaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiaPagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.DiaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesPagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MesPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesPagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.MesPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnioPagoNull() As Boolean
            Return Me.IsNull(Me.tablePG_USP_GET_PagosModuloImpresionFactura.AnioPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnioPagoNull()
            Me(Me.tablePG_USP_GET_PagosModuloImpresionFactura.AnioPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PG_USP_GET_PagosModuloImpresionFacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PG_USP_GET_PagosModuloImpresionFacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PG_USP_GET_PagosModuloImpresionFacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PG_USP_GET_PagosModuloImpresionFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsImpFacturaTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PG_USP_GET_PagosModuloImpresionFacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PG_USP_GET_PagosModuloImpresionFactura"
            tableMapping.ColumnMappings.Add("idx", "idx")
            tableMapping.ColumnMappings.Add("CodigoPago", "CodigoPago")
            tableMapping.ColumnMappings.Add("CodigoDeuda", "CodigoDeuda")
            tableMapping.ColumnMappings.Add("CodigoConceptoCobro", "CodigoConceptoCobro")
            tableMapping.ColumnMappings.Add("CodigoAlumno", "CodigoAlumno")
            tableMapping.ColumnMappings.Add("CodigoFamiliar", "CodigoFamiliar")
            tableMapping.ColumnMappings.Add("NombreCompletoAlumno", "NombreCompletoAlumno")
            tableMapping.ColumnMappings.Add("LocalizacionAlumno", "LocalizacionAlumno")
            tableMapping.ColumnMappings.Add("NombreCompletoFamiliar", "NombreCompletoFamiliar")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("DireccionFamiliar", "DireccionFamiliar")
            tableMapping.ColumnMappings.Add("DocumentoFamiliar", "DocumentoFamiliar")
            tableMapping.ColumnMappings.Add("FechaEmision", "FechaEmision")
            tableMapping.ColumnMappings.Add("FechaPago", "FechaPago")
            tableMapping.ColumnMappings.Add("NumeroDocumento", "NumeroDocumento")
            tableMapping.ColumnMappings.Add("DescripcionDetalle", "DescripcionDetalle")
            tableMapping.ColumnMappings.Add("MontoDetallePago", "MontoDetallePago")
            tableMapping.ColumnMappings.Add("MontoValorVenta", "MontoValorVenta")
            tableMapping.ColumnMappings.Add("DescIGV", "DescIGV")
            tableMapping.ColumnMappings.Add("MontoIGV", "MontoIGV")
            tableMapping.ColumnMappings.Add("MontoTotalTexto", "MontoTotalTexto")
            tableMapping.ColumnMappings.Add("MontoTotalPago", "MontoTotalPago")
            tableMapping.ColumnMappings.Add("DescMoneda", "DescMoneda")
            tableMapping.ColumnMappings.Add("SimboloMoneda", "SimboloMoneda")
            tableMapping.ColumnMappings.Add("DiaPago", "DiaPago")
            tableMapping.ColumnMappings.Add("MesPago", "MesPago")
            tableMapping.ColumnMappings.Add("AnioPago", "AnioPago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SaintGeorgeOnline_Listeners.My.MySettings.Default.BD_SanGeorgeOnlineConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.PG_USP_GET_PagosModuloImpresionFactura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_CodigoDocumento", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_CodigoTalonario", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_CodigoUsuario", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_CodigoTipoUsuario", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_CodigoModulo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_CodigoOpcion", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillFactura(ByVal dataTable As DsImpFactura.PG_USP_GET_PagosModuloImpresionFacturaDataTable, ByVal p_CodigoDocumento As Global.System.Nullable(Of Integer), ByVal p_CodigoTalonario As Global.System.Nullable(Of Integer), ByVal p_CodigoUsuario As Global.System.Nullable(Of Integer), ByVal p_CodigoTipoUsuario As Global.System.Nullable(Of Integer), ByVal p_CodigoModulo As Global.System.Nullable(Of Integer), ByVal p_CodigoOpcion As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p_CodigoDocumento.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p_CodigoDocumento.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoTalonario.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(p_CodigoTalonario.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoUsuario.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(p_CodigoUsuario.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoTipoUsuario.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(p_CodigoTipoUsuario.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoModulo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(p_CodigoModulo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoOpcion.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(p_CodigoOpcion.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataFactura(ByVal p_CodigoDocumento As Global.System.Nullable(Of Integer), ByVal p_CodigoTalonario As Global.System.Nullable(Of Integer), ByVal p_CodigoUsuario As Global.System.Nullable(Of Integer), ByVal p_CodigoTipoUsuario As Global.System.Nullable(Of Integer), ByVal p_CodigoModulo As Global.System.Nullable(Of Integer), ByVal p_CodigoOpcion As Global.System.Nullable(Of Integer)) As DsImpFactura.PG_USP_GET_PagosModuloImpresionFacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p_CodigoDocumento.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p_CodigoDocumento.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoTalonario.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(p_CodigoTalonario.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoUsuario.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(p_CodigoUsuario.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoTipoUsuario.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(p_CodigoTipoUsuario.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoModulo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(p_CodigoModulo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p_CodigoOpcion.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(p_CodigoOpcion.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DsImpFactura.PG_USP_GET_PagosModuloImpresionFacturaDataTable = New DsImpFactura.PG_USP_GET_PagosModuloImpresionFacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DsImpFactura, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DsImpFactura, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DsImpFactura, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DsImpFactura) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
